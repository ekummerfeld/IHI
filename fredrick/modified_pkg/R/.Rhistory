# for( i in 1:(length(dots_color)-1))
# if (dots_color[i] != dots_color[i+1] ) {
#  append(boundary, dots[i,], 0)
# }
#
# dots_color
library(MASS)
blue = mvrnorm(10, c(1,0), cbind( c(1,0), c(0,1)) )
orange = mvrnorm(10, c(0,1), cbind( c(1,0), c(0,1)) )
gen_b = trunc(runif(100,1,11))
gen_o = trunc(runif(100,1,11))
blue_set = cbind(rep(0,100),rep(0,100))
for(i in 1:100) {
blue_set[i,] = blue[gen_b[i],]
}
orange_set = cbind(rep(0,100),rep(0,100))
for(i in 1:100) {
orange_set[i,] = orange[gen_o[i],]
}
blue_obs = cbind(rep(0, 100), rep(0, 100))
for (i in 1:100) {
blue_obs[i,] = mvrnorm(1, blue_set[i,], cbind( c(1/5,0), c(0,1/5)))
}
orange_obs = cbind(rep(0, 100), rep(0, 100))
for (i in 1:100) {
gen = trunc(runif(100,1,11))
orange_obs[i,] = mvrnorm(1, orange_set[i,], cbind( c(1/5,0), c(0,1/5)))
}
x_max =  trunc(max(max(orange_obs[,1]), max(blue_obs[,1])))+ 1
y_max = trunc(max(max(orange_obs[,2]), max(blue_obs[,2])))+ 1
x_min =  trunc(min(min(orange_obs[,1]), min(blue_obs[,1]))) - 1
y_min = trunc(min(min(orange_obs[,2]), min(blue_obs[,2]))) - 1
dots = expand.grid(seq(x_min, x_max, 0.1), seq(y_min, y_max, 0.1))
col = rep(0, length(dots$Var1))
grid = data.frame(x = dots$Var1, y = dots$Var2, col = col)
for (i in 1:length(grid$x) {
sum_b = 0
for (j in 1:100) {
sum_b = sum_b + exp(-5/2 * ( blue_set[j,1] -grid$x[i] )^2) * exp(-5/2 * ( blue_set[j,2] -grid$y[i] )^2)
}
sum_o = 0
for (j in 1:100) {
sum_o = sum_o + exp(-5/2 * ( orange_set[j,1] -grid$x[i] )^2) * exp(-5/2 * ( orange_set[j,2] - grid$y[i] )^2)
}
if (sum_b >= sum_o) {
grid$col[i] = "cornflowerblue"
}
else {
grid$col[i] = "orange"
}
}
plot(blue_obs, xlim = c(x_min,x_max),ylim = c(y_min,y_max), col = "cornflowerblue")
points(orange_obs, col = "orange")
points(cbind(grid$x,grid$y), col = grid$col,  pch = 16, cex =.4 )
# boundary = cbind(c(),c())
# for( i in 1:(length(dots_color)-1))
# if (dots_color[i] != dots_color[i+1] ) {
#  append(boundary, dots[i,], 0)
# }
#
# dots_color
library(MASS)
blue = mvrnorm(10, c(1,0), cbind( c(1,0), c(0,1)) )
orange = mvrnorm(10, c(0,1), cbind( c(1,0), c(0,1)) )
gen_b = trunc(runif(100,1,11))
gen_o = trunc(runif(100,1,11))
blue_set = cbind(rep(0,100),rep(0,100))
for(i in 1:100) {
blue_set[i,] = blue[gen_b[i],]
}
orange_set = cbind(rep(0,100),rep(0,100))
for(i in 1:100) {
orange_set[i,] = orange[gen_o[i],]
}
blue_obs = cbind(rep(0, 100), rep(0, 100))
for (i in 1:100) {
blue_obs[i,] = mvrnorm(1, blue_set[i,], cbind( c(1/5,0), c(0,1/5)))
}
orange_obs = cbind(rep(0, 100), rep(0, 100))
for (i in 1:100) {
gen = trunc(runif(100,1,11))
orange_obs[i,] = mvrnorm(1, orange_set[i,], cbind( c(1/5,0), c(0,1/5)))
}
x_max =  trunc(max(max(orange_obs[,1]), max(blue_obs[,1])))+ 1
y_max = trunc(max(max(orange_obs[,2]), max(blue_obs[,2])))+ 1
x_min =  trunc(min(min(orange_obs[,1]), min(blue_obs[,1]))) - 1
y_min = trunc(min(min(orange_obs[,2]), min(blue_obs[,2]))) - 1
dots = expand.grid(seq(x_min, x_max, 0.1), seq(y_min, y_max, 0.1))
col = rep(0, length(dots$Var1))
grid = data.frame(x = dots$Var1, y = dots$Var2, col = col)
for (i in 1:length(grid$x)) {
sum_b = 0
for (j in 1:100) {
sum_b = sum_b + exp(-5/2 * ( blue_set[j,1] -grid$x[i] )^2) * exp(-5/2 * ( blue_set[j,2] -grid$y[i] )^2)
}
sum_o = 0
for (j in 1:100) {
sum_o = sum_o + exp(-5/2 * ( orange_set[j,1] -grid$x[i] )^2) * exp(-5/2 * ( orange_set[j,2] - grid$y[i] )^2)
}
if (sum_b >= sum_o) {
grid$col[i] = "cornflowerblue"
}
else {
grid$col[i] = "orange"
}
}
plot(blue_obs, xlim = c(x_min,x_max),ylim = c(y_min,y_max), col = "cornflowerblue")
points(orange_obs, col = "orange")
points(cbind(grid$x,grid$y), col = grid$col,  pch = 16, cex =.4 )
# boundary = cbind(c(),c())
# for( i in 1:(length(dots_color)-1))
# if (dots_color[i] != dots_color[i+1] ) {
#  append(boundary, dots[i,], 0)
# }
#
# dots_color
grid = data.frame(expand.grid(seq(x_min, x_max, 0.1), seq(y_min, y_max, 0.1)), col = col)
library(MASS)
blue = mvrnorm(10, c(1,0), cbind( c(1,0), c(0,1)) )
orange = mvrnorm(10, c(0,1), cbind( c(1,0), c(0,1)) )
gen_b = trunc(runif(100,1,11))
gen_o = trunc(runif(100,1,11))
blue_set = cbind(rep(0,100),rep(0,100))
for(i in 1:100) {
blue_set[i,] = blue[gen_b[i],]
}
orange_set = cbind(rep(0,100),rep(0,100))
for(i in 1:100) {
orange_set[i,] = orange[gen_o[i],]
}
blue_obs = cbind(rep(0, 100), rep(0, 100))
for (i in 1:100) {
blue_obs[i,] = mvrnorm(1, blue_set[i,], cbind( c(1/5,0), c(0,1/5)))
}
orange_obs = cbind(rep(0, 100), rep(0, 100))
for (i in 1:100) {
gen = trunc(runif(100,1,11))
orange_obs[i,] = mvrnorm(1, orange_set[i,], cbind( c(1/5,0), c(0,1/5)))
}
x_max =  trunc(max(max(orange_obs[,1]), max(blue_obs[,1])))+ 1
y_max = trunc(max(max(orange_obs[,2]), max(blue_obs[,2])))+ 1
x_min =  trunc(min(min(orange_obs[,1]), min(blue_obs[,1]))) - 1
y_min = trunc(min(min(orange_obs[,2]), min(blue_obs[,2]))) - 1
col = c()
grid = data.frame(expand.grid(seq(x_min, x_max, 0.1), seq(y_min, y_max, 0.1)), col = col)
for (i in 1:length(grid$x)) {
sum_b = 0
for (j in 1:100) {
sum_b = sum_b + exp(-5/2 * ( blue_set[j,1] -grid$x[i] )^2) * exp(-5/2 * ( blue_set[j,2] -grid$y[i] )^2)
}
sum_o = 0
for (j in 1:100) {
sum_o = sum_o + exp(-5/2 * ( orange_set[j,1] -grid$x[i] )^2) * exp(-5/2 * ( orange_set[j,2] - grid$y[i] )^2)
}
if (sum_b >= sum_o) {
grid$col[i] = "cornflowerblue"
}
else {
grid$col[i] = "orange"
}
}
plot(blue_obs, xlim = c(x_min,x_max),ylim = c(y_min,y_max), col = "cornflowerblue")
points(orange_obs, col = "orange")
points(cbind(grid$x,grid$y), col = grid$col,  pch = 16, cex =.4 )
# boundary = cbind(c(),c())
# for( i in 1:(length(dots_color)-1))
# if (dots_color[i] != dots_color[i+1] ) {
#  append(boundary, dots[i,], 0)
# }
#
# dots_color
View(orange)
library(MASS)
blue = mvrnorm(10, c(1,0), cbind( c(1,0), c(0,1)) )
orange = mvrnorm(10, c(0,1), cbind( c(1,0), c(0,1)) )
gen_b = trunc(runif(100,1,11))
gen_o = trunc(runif(100,1,11))
blue_set = cbind(rep(0,100),rep(0,100))
for(i in 1:100) {
blue_set[i,] = blue[gen_b[i],]
}
orange_set = cbind(rep(0,100),rep(0,100))
for(i in 1:100) {
orange_set[i,] = orange[gen_o[i],]
}
blue_obs = cbind(rep(0, 100), rep(0, 100))
for (i in 1:100) {
blue_obs[i,] = mvrnorm(1, blue_set[i,], cbind( c(1/5,0), c(0,1/5)))
}
orange_obs = cbind(rep(0, 100), rep(0, 100))
for (i in 1:100) {
gen = trunc(runif(100,1,11))
orange_obs[i,] = mvrnorm(1, orange_set[i,], cbind( c(1/5,0), c(0,1/5)))
}
x_max =  trunc(max(max(orange_obs[,1]), max(blue_obs[,1])))+ 1
y_max = trunc(max(max(orange_obs[,2]), max(blue_obs[,2])))+ 1
x_min =  trunc(min(min(orange_obs[,1]), min(blue_obs[,1]))) - 1
y_min = trunc(min(min(orange_obs[,2]), min(blue_obs[,2]))) - 1
dots = expand.grid(seq(x_min, x_max, 0.1), seq(y_min, y_max, 0.1))
col = rep(0, length(dots$Var1))
grid = data.frame(x = dots$Var1, y = dots$Var2, col = col)
for (i in 1:length(grid$x)) {
sum_b = 0
for (j in 1:100) {
sum_b = sum_b + exp(-5/2 * ( blue_set[j,1] -grid$x[i] )^2) * exp(-5/2 * ( blue_set[j,2] -grid$y[i] )^2)
}
sum_o = 0
for (j in 1:100) {
sum_o = sum_o + exp(-5/2 * ( orange_set[j,1] -grid$x[i] )^2) * exp(-5/2 * ( orange_set[j,2] - grid$y[i] )^2)
}
if (sum_b >= sum_o) {
grid$col[i] = "cornflowerblue"
}
else {
grid$col[i] = "orange"
}
}
plot(blue_obs, xlim = c(x_min,x_max),ylim = c(y_min,y_max), col = "cornflowerblue")
points(orange_obs, col = "orange")
points(cbind(grid$x,grid$y), col = grid$col,  pch = 16, cex =.4 )
# boundary = cbind(c(),c())
# for( i in 1:(length(dots_color)-1))
# if (dots_color[i] != dots_color[i+1] ) {
#  append(boundary, dots[i,], 0)
# }
#
# dots_color
view(grid)
View(grid)
library(MASS)
blue = mvrnorm(10, c(1,0), cbind( c(1,0), c(0,1)) )
orange = mvrnorm(10, c(0,1), cbind( c(1,0), c(0,1)) )
gen_b = trunc(runif(100,1,11))
gen_o = trunc(runif(100,1,11))
blue_set = cbind(rep(0,100),rep(0,100))
for(i in 1:100) {
blue_set[i,] = blue[gen_b[i],]
}
orange_set = cbind(rep(0,100),rep(0,100))
for(i in 1:100) {
orange_set[i,] = orange[gen_o[i],]
}
blue_obs = cbind(rep(0, 100), rep(0, 100))
for (i in 1:100) {
blue_obs[i,] = mvrnorm(1, blue_set[i,], cbind( c(1/5,0), c(0,1/5)))
}
orange_obs = cbind(rep(0, 100), rep(0, 100))
for (i in 1:100) {
gen = trunc(runif(100,1,11))
orange_obs[i,] = mvrnorm(1, orange_set[i,], cbind( c(1/5,0), c(0,1/5)))
}
x_max =  trunc(max(max(orange_obs[,1]), max(blue_obs[,1])))+ 1
y_max = trunc(max(max(orange_obs[,2]), max(blue_obs[,2])))+ 1
x_min =  trunc(min(min(orange_obs[,1]), min(blue_obs[,1]))) - 1
y_min = trunc(min(min(orange_obs[,2]), min(blue_obs[,2]))) - 1
dots = expand.grid(seq(x_min, x_max, 0.1), seq(y_min, y_max, 0.1))
col = rep(0, length(dots$Var1))
grid = data.frame(x = dots$Var1, y = dots$Var2, col = col)
for (i in 1:length(grid$x)) {
sum_b = 0
for (j in 1:100) {
sum_b = sum_b + exp(-5/2 * ( blue_set[j,1] -grid$x[i] )^2) * exp(-5/2 * ( blue_set[j,2] -grid$y[i] )^2)
}
sum_o = 0
for (j in 1:100) {
sum_o = sum_o + exp(-5/2 * ( orange_set[j,1] -grid$x[i] )^2) * exp(-5/2 * ( orange_set[j,2] - grid$y[i] )^2)
}
if (sum_b >= sum_o) {
grid$col[i] = "cornflowerblue"
}
else {
grid$col[i] = "orange"
}
}
plot(blue_obs, xlim = c(x_min,x_max),ylim = c(y_min,y_max), col = "cornflowerblue")
points(orange_obs, col = "orange")
points(cbind(grid$x,grid$y), col = grid$col,  pch = 16, cex =.4 )
boundary = NULL
for( i in 1:(length(grid$col)-1))
if (grid$col[i] != grid$col[i+1] ) {
append(boundary,c(grid$x[i],grid$y[i]), length(boundary))
}
dots_color
boundary = NULL
for( i in 1:(length(grid$col)-1))
if (grid$col[i] != grid$col[i+1] ) {
boundary = append(boundary,c(grid$x[i],grid$y[i]), length(boundary))
}
contour(boundary)
q()
plot(qsort(rnorm(50)))
plot(sort(rnorm(50)))
synthetic = rnorm(50)
plot(sort(synthetic))
synthetic = rnorm(23)
synthetic = rnorm(23)
plot(sort(synthetic))
synthetic = rnorm(23)
plot(synthetic)
plot(sort(synthetic))
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
ggplot(synthetic, aes(y= synthetic)) + geom_density()
ggplot(synthetic) + geom_density()
ggplot(data.frame(x = seq(1:23) , y = synthetic)) + geom_density()
ggplot(data.frame(x = seq(1:23) , y = synthetic) aes(x=x,y=y)) + geom_density()
ggplot(data.frame(x = seq(1:23) , y = synthetic), aes(x=x,y=y)) + geom_density()
data.frame(x = seq(1:23) , y = synthetic)
ggplot(data.frame(x = seq(1:23) , y = synthetic), aes(x=x,y=y)) + geom_line()
ggplot(data.frame(x = seq(1:23) , y = synthetic), aes(y)) + geom_line()
ggplot(data.frame(x = seq(1:23) , y = synthetic)) + geom_density()
df = data.frame(x = seq(1:23) , y = synthetic)
ggplot(df, aes(y)) + geom_density()
n=23
synthetic = rnorm(n)
plot(synthetic)
plot(sort(synthetic))
library(ggplot2)
df = data.frame(x = seq(1:n) , y = synthetic)
ggplot(df, aes(x=x,y=y)) + geom_line()
ggplot(df, aes(y)) + geom_density()
ggplot(df, aes(x=x,y=sort(y)) + geom_line()
ggplot(df, aes(x=x,y=sort(y)) + geom_line()
ggplot(df, aes(x=x,y=sort(y))) + geom_line()
n=23
synthetic = rnorm(n)
plot(synthetic)
plot(sort(synthetic))
library(ggplot2)
df = data.frame(x = seq(1:n) , y = synthetic)
ggplot(df, aes(x=x,y=y)) + geom_line()
ggplot(df, aes(x=x,y=sort(y))) + geom_line()
ggplot(df, aes(y)) + geom_density()
ggplot(df, aes(y)) + freq_poly()
ggplot(df, aes(y)) + geom_freqpoly()
ggplot(df, aes(y)) + geom_density()
n = 100
synthetic = rnorm(n)
plot(synthetic)
plot(sort(synthetic))
library(ggplot2)
df = data.frame(x = seq(1:n) , y = synthetic)
ggplot(df, aes(x=x,y=y)) + geom_line()
ggplot(df, aes(x=x,y=sort(y))) + geom_line()
ggplot(df, aes(y)) + geom_density()
ggplot(df, aes(y)) + geom_boxplot()
ggplot(df, aes(y, group = 1)) + geom_boxplot()
ggplot(df, aes(y= y, group = 1)) + geom_boxplot()
ggplot(df, aes(y= y)) + geom_boxplot()
ggplot(df, aes(group = NULL, y= y)) + geom_boxplot()
ggplot(df, aes(group = "1", y= y)) + geom_boxplot()
ggplot(df, aes(x= "1", y= y)) + geom_boxplot()
ls
source("load.R")
dir()
source("pkg/R/load.R")
loud()
install.packages("deal")
loud()
install.packages("combinat")
loud()
source("https://bioconductor.org/biocLite.R")
biocLite("graph")
biocLite("graph")
biocLite("graph")
library("base64enc", lib.loc="~/R/win-library/3.3")
detach("package:base64enc", unload=TRUE)
loud()
test(1)
loud()
loud()
test(1)
source("pkg/R/load.R")
loud()
test(1)
loud()
source("pkg/R/load.R")
Sys.info()
foo = Sys.info()
foo[1]
OS = foo[1]
Sys.info()[1]
uname(Sys.info()[1])
unname(Sys.info()[1])
source("pkg/R/load.R")
loud()
library("graph")
sourceDir('./',trace=FALSE)
sourceDir('./mods/',trace=FALSE)
library('pcalg') #for running pc derivative algorithms
install.packages("pcalg")
install.packages("bnlearn")
loud()
source("pkg/R/test1.R")
source("pkg/R/test.R")
test(1)
test(2)
list.files()
setwd("pkg/R")
source("load.R")
loud()
test(1)
install.packages("hash")
source("load.R")
test(1)
loud()
source("load.R")
loud()
test(1)
getwd
getwd()
source("load.R")
loud()
getwd()
test(1)
source("load.R")
test(1)
loud()
test(1)
system(paste('del','.\..\tmp\pipeline.ind.clingo'))
system(paste('del','..\tmp\pipeline.ind.clingo'))
system(paste('del','..\tmp\pipeline.ind.clingo'))
system(paste('del','..\\tmp\\pipeline.ind.clingo'))
system("dir", "")
system("dir")
system(dir',)
system('dir')
system('dir')
system("cmd.exe", input = "dir")
system("cmd.exe", input =paste('del','..\\tmp\\pipeline.ind.clingo'))
loud()
loud()
sourceDir('./',trace=FALSE)
sourceDir('./mods/',trace=FALSE)
source("load.R")
loud()
getwd()
sourceDir("./",trace=FALSE)
sourceDir("\\",trace=FALSE)
sourceDir('./mods/',trace=FALSE)
sourceDir("./",trace=FALSE)
sourceDir("/",trace=FALSE)
#These are some of the parameters needed for operation
#
OS <- unname(Sys.info()[1])
#loads the whole directory to R
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "\\.[RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
# since the functions here are not really changed, loading them already here
loud<-function() {
library('deal') #used in the bayes independence test
library('combinat')
library('graph') #for pcalg output handling
sourceDir("/",trace=FALSE)
sourceDir('./mods/',trace=FALSE)
others<<-FALSE #do not run other algorithms
if ( others ) {
#not using pcalg anymore here, due to major changes in their code
library('pcalg') #for running pc derivative algorithms
library('bnlearn') #score-based learning
}
}
loud()
getwd()
test(1)
sourceDir("\\",trace=FALSE)
sourceDir("",trace=FALSE)
#These are some of the parameters needed for operation
#
OS <- unname(Sys.info()[1])
#loads the whole directory to R
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "\\.[RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
# since the functions here are not really changed, loading them already here
loud<-function() {
library('deal') #used in the bayes independence test
library('combinat')
library('graph') #for pcalg output handling
sourceDir("\\",trace=FALSE)
sourceDir('./mods/',trace=FALSE)
others<<-FALSE #do not run other algorithms
if ( others ) {
#not using pcalg anymore here, due to major changes in their code
library('pcalg') #for running pc derivative algorithms
library('bnlearn') #score-based learning
}
}
sourceDir("\\",trace=FALSE)
sourceDir('./mods/',trace=FALSE)
sourceDir(getwd(),trace=FALSE)
sourceDir(getwd(),trace=FALSE)
test()
sourceDir('./',trace=FALSE)
getwd
getwd()
sourceDir('./',trace=FALSE)
sourceDir('./mods/',trace=FALSE)
loud()
sourceDir('./',trace=FALSE)
for (nm in list.files(path, pattern = "\\.[RrSsQq]$")) {
}
